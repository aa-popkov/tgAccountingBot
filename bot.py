import logging
import configparser
from random import randint
from sys import exit

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import BotCommand
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData

from googlesheets import gs_main
from custom_func import pars_user_data

config = configparser.ConfigParser()
config.read('config.ini')


token = config.get('tg_bot', 'token')
admin_chat_id = int(config.get('tg_bot', 'admin_id'))
admin_login = config.get('tg_bot', 'admin_login')
if not token or not admin_chat_id:
    exit("Error: no token or admin chat id provided")

bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

cb = CallbackData("acoounting", "type")
account_type_btn = ['üõí–†–∞—Å—Ö–æ–¥—ã', 'üí∞–î–æ—Ö–æ–¥—ã']
exp_category_btn = ['üçú–ü—Ä–æ–¥—É–∫—Ç—ã', 'üè°–ö–≤–∞—Ä—Ç–∏—Ä–∞', 'üöó–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
                    'üåç–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/–°–≤—è–∑—å', 'üö¨–¢–∞–±–∞–∫', 'üç∫–ê–ª–∫–æ–≥–æ–ª—å',
                    '‚öí–û–±–µ–¥—ã/–ö–æ—Ñ–µ', 'üéÅ–ü–æ–¥–∞—Ä–∫–∏', 'üéâ–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
                    'üëî–û–¥–µ–∂–¥–∞/–û–±—É–≤—å', 'üöÑ–ü–æ–µ–∑–¥–∫–∏']
inc_category_btn = ['üí∞–ó–∞—Ä–ø–ª–∞—Ç–∞', 'üí∏–ê–≤–∞–Ω—Å', 'üí≥–ö–µ—à–±–µ–∫', 'üéÅ–ü–æ–¥–∞—Ä–∫–∏']


class OrderAccount(StatesGroup):
    waiting_type_account = State()
    waiting_category = State()
    waiting_sum = State()
    waiting_delete_row = State()


@dp.message_handler(commands=['start'], state="*")
async def start_dialog(message: types.Message, state: FSMContext):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    await state.finish()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(*account_type_btn)
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–æ–≤, –Ω–∞ –ø–∞–Ω–µ–ª–∏', reply_markup=kb)
    await OrderAccount.waiting_type_account.set()


@dp.message_handler(commands=["delete"], state="*")
async def delete_last_row(message: types.Message, state: FSMContext):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    await state.finish()
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add('‚õî–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É‚õî')
    await message.answer("–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é —Å—Ç—Ä–æ–∫—É?", reply_markup=kb)
    await OrderAccount.waiting_delete_row.set()


@dp.message_handler(state=OrderAccount.waiting_delete_row)
async def delete_last_row(message: types.Message, state: FSMContext):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    if message.text != '‚õî–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É‚õî':
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∞ –ø–∞–Ω–µ–ª–∏!")
        return
    await state.finish()
    num_row_for_update = len(gs_main.get_value(["Data!A1:A"]))
    sheet_range = f"Data!A{num_row_for_update}:E{num_row_for_update}"
    gs_main.set_value([['', '', '', '', '']], sheet_range)
    await message.answer("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
                         "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:\n"
                         "/start")


@dp.message_handler(state=OrderAccount.waiting_type_account)
async def choose_category(message: types.Message, state: FSMContext):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    if message.text not in account_type_btn:
        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–Ω–µ–ª—å –Ω–∏–∂–µ.")
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    if message.text == account_type_btn[0]:
        kb.add(*exp_category_btn)
    else:
        kb.add(*inc_category_btn)
    await message.answer(f"–í—ã–±—Ä–∞–Ω—ã {message.text}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=kb)
    await OrderAccount.next()
    await state.update_data(chosen_account=message.text)


@dp.message_handler(state=OrderAccount.waiting_category)
async def add_sum(message: types.Message, state: FSMContext):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    user_data = await state.get_data()
    if message.text not in exp_category_btn and user_data['chosen_account'] == account_type_btn[0]:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–Ω–µ–ª—å –Ω–∏–∂–µ.")
        return
    if message.text not in inc_category_btn and user_data['chosen_account'] == account_type_btn[1]:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–Ω–µ–ª—å –Ω–∏–∂–µ.")
        return
    await OrderAccount.next()
    await state.update_data(chosen_category=message.text)
    await message.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {message.text}\n\n"
                         f"–í–≤–µ–¥–∏—Ç–µ:\n"
                         f"–°–£–ú–ú–ê –î–ê–¢–ê*\n\n* - –ù–µ–æ–±–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è\n–§–æ—Ä–º–∞—Ç üìÜ–î–∞—Ç—ã - dd.mm.yyyy")


@dp.message_handler(state=OrderAccount.waiting_sum)
async def post_add_sum(message: types.Message, state: FSMContext):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    pars_message = pars_user_data(message.text)
    if pars_message['sum'] is None:
        await message.answer('–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –®–ê–ë–õ–û–ù–£!')
        return

    user_data = await state.get_data()
    type_acc = "‚ùå" if user_data['chosen_account'] == account_type_btn[0] else "‚úî"
    arr_to_put = [type_acc, pars_message['sum'], (user_data['chosen_category'])[1::], '–û–±—â–∏–π', pars_message['date']]

    num_row_for_update = len(gs_main.get_value(["Data!A1:A"]))+1
    sheet_range = f"Data!A{num_row_for_update}:E{num_row_for_update}"
    gs_main.set_value([arr_to_put], sheet_range)

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    if user_data['chosen_account'] == account_type_btn[0]:
        kb.add(*exp_category_btn)
    else:
        kb.add(*inc_category_btn)
    await message.answer(f"C—É–º–º–∞ {message.text}—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤\n"
                         f"–∫–∞—Ç–µ–≥–æ—Ä–∏—é {user_data['chosen_category']}", reply_markup=kb)
    await OrderAccount.previous()


@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="random_value"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)


@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer(str(randint(1, 10)))
    await call.answer()


@dp.message_handler()
async def empty_message(message: types.Message):
    if not is_admin(message):
        await message.answer(f"–≠—Ç–æ –ª–∏—á–Ω—ã–π –±–æ—Ç, —É—Ö–æ–¥–∏!\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {admin_login}")
        return
    await message.answer("–ü–æ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª üò≠\n"
                         "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥:\n"
                         "/start")


def is_admin(message: types.Message):
    if message.from_user.id != admin_chat_id:
        return False
    else:
        return True


async def on_startup(dp: Dispatcher):
    commands = [
        BotCommand(command="/start", description="–°—Ç–∞—Ä—Ç—É–µ–º!"),
        # BotCommand(command="/help", description="–ü–æ–º–æ–≥–∞–µ–º"),
        BotCommand(command="/delete", description="–£–¥–∞–ª—è–µ–º!"),
    ]
    await bot.set_my_commands(commands)
    await dp.bot.send_message(admin_chat_id, '–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\nüèÅ - /start')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
